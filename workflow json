{
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -112,
        -176
      ],
      "id": "3cd6aa4f-dc9d-4fb2-adc1-0fc8f30559f3",
      "name": "Telegram Trigger",
      "webhookId": "ca5d4485-21d5-4098-8f2e-64f2907727cc",
      "credentials": {
        "telegramApi": {
          "id": "K4K4OnGCKarYmKbV",
          "name": "sentiel guard"
        }
      }
    },
    {
      "parameters": {
        "chatId": "6246336509",
        "text": "==üîç *Threat Analysis Complete*\n\n*Message:* {{ $json.originalText }}\n\n*Scores:*\n‚Ä¢ Toxicity: {{ $json.toxicity }}%\n‚Ä¢ Phishing: {{ $json.phishing }}%\n‚Ä¢ Deception: {{ $json.deception }}%\n   _Reason: {{ $json.deceptionExplanation }}_\n\n*Threat Intelligence:*\n‚Ä¢ Associated IP: `{{ $json.maliciousIp }}`\n‚Ä¢ Action: Logged for blocking.\n\n*Verdict:* {{ $json.verdict }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1568,
        -320
      ],
      "id": "d5c03a7a-fa1b-4d91-a28e-c941adea88c2",
      "name": "Send a text message",
      "webhookId": "c2117abe-f82a-4c8c-9cc2-66a7f74fb9bd",
      "credentials": {
        "telegramApi": {
          "id": "K4K4OnGCKarYmKbV",
          "name": "sentiel guard"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the input data\nconst inputData = $input.first().json;\n\n// Default values\nlet deceptionScore = 0;\nlet explanation = \"Analysis failed - no data received\";\n\n// Check if we have the debug data structure\nif (inputData.responseText && inputData.responseText !== \"NO RESPONSE\") {\n    const responseText = inputData.responseText;\n    \n    // Try to parse JSON response from Gemini\n    try {\n        const parsedResult = JSON.parse(responseText);\n        deceptionScore = parsedResult.deceptionScore || 0;\n        explanation = parsedResult.explanation || \"No explanation provided\";\n    } catch (error) {\n        // If parsing fails, use simulation\n        deceptionScore = 75;\n        explanation = \"AI analysis failed, using simulation\";\n    }\n} else {\n    // Fallback simulation based on common patterns\n    const text = inputData.rawResponse?.message?.text || \"\";\n    \n    if (text.includes(\"http\") || text.includes(\"bit.ly\") || text.includes(\"click\")) {\n        deceptionScore = 85;\n        explanation = \"Suspicious links detected\";\n    } else if (text.includes(\"free\") || text.includes(\"money\") || text.includes(\"win\")) {\n        deceptionScore = 90;\n        explanation = \"Financial scam detected\";\n    } else if (text.includes(\"idiot\") || text.includes(\"stupid\")) {\n        deceptionScore = 60;\n        explanation = \"Insulting language detected\";\n    } else {\n        deceptionScore = 20;\n        explanation = \"Normal conversation\";\n    }\n}\n\nreturn [{\n  json: {\n    deception: deceptionScore,\n    deceptionExplanation: explanation\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        -96
      ],
      "id": "d88cdbef-7a4b-457f-9988-ba9d5cce6aa4",
      "name": "Parse Fake News."
    },
    {
      "parameters": {
        "jsCode": "// 1. Initialize variables\nlet phishingScore = 0;\nlet toxicityScore = 0;\nlet deceptionScore = 0;\nlet originalText = '';\nlet chatId = null;\nlet deceptionExplanation = '';\n\n// 2. Get data from all previous nodes\nitems.forEach(item => {\n  const data = item.json;\n  if (data.phishing !== undefined) phishingScore = data.phishing;\n  if (data.toxicity !== undefined) toxicityScore = data.toxicity;\n  if (data.deception !== undefined) deceptionScore = data.deception;\n  if (data.deceptionExplanation !== undefined) deceptionExplanation = data.deceptionExplanation;\n  if (data.originalText !== undefined) originalText = data.originalText;\n  if (data.chatId !== undefined) chatId = data.chatId;\n  \n  // Get text/chatId from raw message if needed\n  if (data.message !== undefined) {\n    originalText = data.message.text || originalText;\n    chatId = data.message.chat?.id || chatId;\n  }\n});\n\n// 3. Calculate overall threat (more sensitive thresholds)\nconst isThreat = phishingScore > 60 || toxicityScore > 70 || deceptionScore > 65;\n\n// 4. SIMULATE IP DETECTION\nlet maliciousIp = \"No IP found\";\nif (isThreat) {\n  maliciousIp = \"185.220.101.134\"; // Mock IP\n}\n\n// 5. Prepare final output\nreturn [{\n  json: {\n    phishing: phishingScore,\n    toxicity: toxicityScore,\n    deception: deceptionScore,\n    deceptionExplanation: deceptionExplanation,\n    originalText: originalText,\n    chatId: chatId,\n    isThreat: isThreat,\n    maliciousIp: maliciousIp,\n    verdict: isThreat ? \"‚ö†Ô∏è HIGH RISK THREAT DETECTED\" : \"‚úÖ Content appears safe.\"\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        928,
        -320
      ],
      "id": "9b359b81-4869-4d0a-9fb2-7b360415191a",
      "name": "Merge & Simulate IP.",
      "executeOnce": true,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://ntfy.sh/sentinel_guard_alerts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Title",
              "value": "Sentinel Guard Alert"
            },
            {
              "name": "Priority",
              "value": "high"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "body": "=üö® Threat detected from IP {{ $json.maliciousIp }}. Message: \"{{ $json.originalText }}\"",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 500
            }
          },
          "proxy": ""
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1392,
        -112
      ],
      "id": "faccbccc-674c-40d7-b97d-b3b1c58cf392",
      "name": "Simulate IP Alert"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1ApnMMHoJXzWbDtUpoC3dkGoAp97DzJ01pey1lqRCsF0",
          "mode": "list",
          "cachedResultName": "Simulate IP Block",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ApnMMHoJXzWbDtUpoC3dkGoAp97DzJ01pey1lqRCsF0/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Blocklist",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ApnMMHoJXzWbDtUpoC3dkGoAp97DzJ01pey1lqRCsF0/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "isThreat"
          ],
          "schema": [
            {
              "id": "phishing",
              "displayName": "phishing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "toxicity",
              "displayName": "toxicity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "deception",
              "displayName": "deception",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "originalText",
              "displayName": "originalText",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "chatId",
              "displayName": "chatId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "isThreat",
              "displayName": "isThreat",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "maliciousIp",
              "displayName": "maliciousIp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "verdict",
              "displayName": "verdict",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1152,
        -112
      ],
      "id": "4aba5a16-bffc-41bb-b7a2-c1911d84c4b4",
      "name": "Simulate IP Block",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "AOhRkSs3PxUVpfTG",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-flash-latest",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-flash-latest"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze this text for misinformation or fake news. Provide ONLY a JSON response with this exact format: {\"deceptionScore\": number between 0-100, \"explanation\": \"brief reason\"}. Text: \"{{ $json.message.text }}\""
            }
          ]
        },
        "simplify": false,
        "jsonOutput": true,
        "options": {
          "maxOutputTokens": 100,
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        64,
        -96
      ],
      "id": "52183311-0648-478a-a12e-8d46143df8c6",
      "name": "Message a model",
      "credentials": {
        "googlePalmApi": {
          "id": "Q55WMa7qWwphK1Ow",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Phishing Detection Algorithm\nconst text = $input.first().json.message.text;\nlet phishingScore = 0;\n\n// Phishing indicators with weights\nconst phishingIndicators = [\n  { regex: /urgent|immediately|action required|right now/i, weight: 0.3 },\n  { regex: /account suspended|verify your account|login required|security alert/i, weight: 0.4 },\n  { regex: /click here|link below|http\\:\\/\\/|https\\:\\/\\/|bit\\.ly|tinyurl|shorturl/i, weight: 0.4 },\n  { regex: /dear (customer|user|valued member|account holder)/i, weight: 0.2 },\n  { regex: /free|win|prize|reward|bonus|gift card/i, weight: 0.3 },\n  { regex: /password|credentials|login info|account details/i, weight: 0.4 },\n  { regex: /\\$\\$|\\$\\d+|money transfer|payment required/i, weight: 0.3 },\n  { regex: /limited time|offer expires|only today|last chance/i, weight: 0.2 }\n];\n\n// Calculate phishing score based on detected patterns\nphishingIndicators.forEach(indicator => {\n  if (indicator.regex.test(text)) {\n    phishingScore += indicator.weight;\n  }\n});\n\n// Additional checks\nconst textLength = text.length;\nconst linkCount = (text.match(/http\\:\\/\\/|https\\:\\/\\/|www\\./gi) || []).length;\n\n// Penalty for multiple links\nif (linkCount > 1) {\n  phishingScore += 0.2 * (linkCount - 1);\n}\n\n// Cap the score at 100%\nphishingScore = Math.min(1, phishingScore) * 100;\n\n// Add the score and analysis to the data\nreturn [{\n  json: {\n    ...$input.first().json, // Keep all original data\n    phishing: Math.round(phishingScore),\n    phishingIndicators: phishingIndicators\n      .filter(indicator => indicator.regex.test(text))\n      .map(indicator => indicator.regex.source),\n    linkCount: linkCount\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        256,
        -320
      ],
      "id": "b1a2baae-34fc-4aca-ad30-ab1b3746240f",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    rawResponse: $input.first().json,\n    hasResponse: !!$input.first().json.response,\n    responseText: $input.first().json.response || \"NO RESPONSE\",\n    error: $input.first().json.error || \"NO ERROR\",\n    allKeys: Object.keys($input.first().json)\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        -96
      ],
      "id": "d21cc0d2-d8d0-4c2f-b87e-9e7e35f4f4cb",
      "name": "Debug Gemini Output"
    },
    {
      "parameters": {
        "jsCode": "// Toxicity Detection\nconst text = $input.first().json.message.text.toLowerCase();\nlet toxicityScore = 0;\n\n// Toxic word detection\nconst toxicWords = [\"idiot\", \"stupid\", \"fool\", \"hate\", \"kill\", \"die\", \"ugly\", \"worthless\"];\ntoxicWords.forEach(word => {\n  if (text.includes(word)) {\n    toxicityScore = Math.max(toxicityScore, 80);\n  }\n});\n\n// Personal attacks\nif (text.includes(\"you're\") && toxicityScore > 0) {\n  toxicityScore += 10;\n}\n\n// Cap at 100%\ntoxicityScore = Math.min(100, toxicityScore);\n\nreturn [{\n  json: {\n    toxicity: toxicityScore,\n    originalText: $input.first().json.message.text,\n    chatId: $input.first().json.message.chat.id\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        256,
        -592
      ],
      "id": "bcf09be4-0bf2-41f7-85d4-91249a610200",
      "name": "Code2"
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Fake News.": {
      "main": [
        [
          {
            "node": "Merge & Simulate IP.",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge & Simulate IP.": {
      "main": [
        [
          {
            "node": "Simulate IP Block",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simulate IP Alert": {
      "main": [
        []
      ]
    },
    "Simulate IP Block": {
      "main": [
        [
          {
            "node": "Simulate IP Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Debug Gemini Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge & Simulate IP.",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug Gemini Output": {
      "main": [
        [
          {
            "node": "Parse Fake News.",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Merge & Simulate IP.",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7cfe4fd02e91336d786ea7d3a84837cf247566f13359508fefd95313e58f113a"
  }
}
